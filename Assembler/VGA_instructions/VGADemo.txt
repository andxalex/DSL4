lda 0x06        #Load the interrupt counter
ldb 0x00
bgt 0x10        #Go to START_1
lda 0x00        #Trigger to change colour
alui orr 0x02   #Only bit operations
sta 0xB2
alui and 0xFD
sta 0xB2
alu app         #START_1, Increase interrupt counter
sta 0x06
ldb 0x07
blt 0x1B        #Go to START_2, check if the 1 second limit is reached
lda 0x00
sta 0x06
lda 0x00        #START_2, Initialise reg A with zero
ldb 0x00        #Initialise reg B with zero    
sta 0x02        #Store adress of A
stb 0x03        #Store adress of B
sta 0xB0        #A for X (Write first 00)
stb 0xB1        #B for Y
ldb 0x03        #LOOP (27)
sta 0x02        #Store adress of A
stb 0x03        #Store adress of B
sta 0xB0        #A for X
stb 0xB1        #B for Y
alui and 0x01
blui and 0x01
alu and
sta 0xB2        #(A*1)*(B*1) operation to determine colour
lda 0x02        #Load old adresses
ldb 0x03
alu app         #Increase value of A
sta 0x02        #Turn on and off Write enable, Bit operations
blui orr 0x80
stb 0xB1
blui and 0x7F
stb 0xB1
ldb 0x02        #Load old addresses
lda 0x02
ldb 0x00 
bgt 0x27        #Check if a has overflowed so that it means we move to the next row
ldb 0x03        #Get old adress of B
blu bpp         #Increase B
stb 0x03        #Store b
lda 0x08        #Load a with 127
beq 0x5C        #Compare B with 127 to see if program is finsiihed (Go to END)
lda 0x00
gto 0x27        #Else continue the loop (Go to LOOP)
gti             #END (3C)